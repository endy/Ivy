
Texture2D <float4> myTex : register(t0);
Texture2D <float4> myKitten : register(t1);
SamplerState mySampler : register(s0);

struct VS_OUT
{
	float4 position : SV_POSITION;
	float2 tex0		: TEXCOORD;
};

struct VS_BUNNY_OUT
{
	float4 position : SV_POSITION;
	float2 tex0		: TEXCOORD;
	float4 normal   : NORMAL;
};

cbuffer MB : register(c0)
{       
    row_major matrix world;
    row_major matrix view;
	row_major matrix projection;
};

cbuffer Light : register(c0)
{
    float4 lposition;
	float4 lcolor;
};

cbuffer Material : register(c1)
{
	float4 diffuse;
	float4 specular;
	float4 ambient;
};


VS_OUT MyVS( float4 Pos : SV_POSITION,
			 float2 Tex : TEXCOORD )
{
	VS_OUT myout;

	myout.position = mul(Pos, world);
	myout.position = mul(myout.position, view);
	myout.position = mul(myout.position, projection);

	myout.tex0 = Tex;

	return myout;
}


float4 MyPS( float4 pos      : SV_POSITION,
			 float2 texCoord : TEXCOORD  )     : SV_TARGET
{
    float4 scale = { -1.0, -1.0, -1.0, 1.0 };
	float4 invert = { 1.0, 1.0, 1.0, 0.0 };
	
	return myKitten.Sample(mySampler, texCoord) * myTex.Sample(mySampler, texCoord);
}

VS_BUNNY_OUT BunnyVS( float4 Pos : SV_POSITION,
			          float2 Tex : TEXCOORD,
				      float4 Normal : NORMAL )
{
	VS_BUNNY_OUT myout;

	myout.position = mul(Pos, world);
	myout.position = mul(myout.position, view);
	myout.position = mul(myout.position, projection);

	myout.tex0 = Tex;

	myout.normal = mul(Normal, world);
	myout.normal = mul(myout.normal, view);
	myout.normal = mul(myout.normal, projection);

	myout.normal = normalize(myout.normal);

	return myout;
}

float4 BunnyPS( float4 pos      : SV_POSITION,
			    float2 texCoord : TEXCOORD,
			    float4 normal   : NORMAL )        : SV_TARGET
{	
	return lcolor * dot(normal, lposition);
}

Texture2D <float4> myDepth : register(t0);
Texture2D <uint4> myStencil : register(t1);

float4 MyDepthView( float4 pos : SV_POSITION,
                    float2 dCoord : TEXCOORD0) : SV_TARGET
{
    float4 color = myDepth.Sample(mySampler, dCoord);


	color.g = (myStencil.Load(int3(int2(dCoord*800), 0)).g / 255.0);
	color.a = 1.0;
	return color;
}