///////////////////////////////////////////////////////////////////////////////////////////////////
///
///     Ivy Engine
///
///     Copyright 2010-2011, Brandon Light
///     All rights reserved.
///
///////////////////////////////////////////////////////////////////////////////////////////////////

#include "DxBuffer.h"

#include <d3d11.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::DxBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
DxBuffer::DxBuffer()
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::~DxBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
DxBuffer::~DxBuffer()
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::Create
///////////////////////////////////////////////////////////////////////////////////////////////////
DxBuffer* DxBuffer::Create(
    ID3D11Device* pDevice,
    DxBufferCreateInfo* pCreateInfo)
{
    DxBuffer* pNewBuffer = new DxBuffer();

    if (pNewBuffer->Init(pDevice, pCreateInfo) == FALSE)
    {
        pNewBuffer->Destroy();
        pNewBuffer = NULL;
    }

    return pNewBuffer;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::Destroy
///////////////////////////////////////////////////////////////////////////////////////////////////
VOID DxBuffer::Destroy()
{
    if (m_pDxBuffer)
    {
        m_pDxBuffer->Release();
    }

    delete this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::Init
///////////////////////////////////////////////////////////////////////////////////////////////////
BOOL DxBuffer::Init(
    ID3D11Device* pDevice,
    DxBufferCreateInfo* pCreateInfo)
{
    D3D11_BUFFER_DESC bufferDesc;
    memset(&bufferDesc, 0, sizeof(D3D11_BUFFER_DESC));
    bufferDesc.Usage            = D3D11_USAGE_DYNAMIC;
    bufferDesc.ByteWidth        = pCreateInfo->elemSizeBytes;
    bufferDesc.BindFlags        = D3D11_BIND_CONSTANT_BUFFER;
    bufferDesc.MiscFlags        = 0;

    if (pCreateInfo->flags.cpuWriteable)
    {
        bufferDesc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
    }

    D3D11_SUBRESOURCE_DATA bufferInitData;
    memset(&bufferInitData, 0, sizeof(D3D11_SUBRESOURCE_DATA));	
    bufferInitData.pSysMem = pCreateInfo->pInitialData;
    bufferInitData.SysMemPitch = pCreateInfo->initialDataPitch;
    bufferInitData.SysMemSlicePitch = pCreateInfo->initialDataSlicePitch;

    pDevice->CreateBuffer(&bufferDesc, &bufferInitData, &m_pDxBuffer);

    return TRUE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::Init
///////////////////////////////////////////////////////////////////////////////////////////////////
VOID* DxBuffer::Map(
    ID3D11DeviceContext* pContext)
{
    D3D11_MAPPED_SUBRESOURCE mappedBuffer;
    pContext->Map(m_pDxBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedBuffer);

    return mappedBuffer.pData;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::Unmap
///////////////////////////////////////////////////////////////////////////////////////////////////
VOID DxBuffer::Unmap(
    ID3D11DeviceContext* pContext)
{
    pContext->Unmap(m_pDxBuffer, 0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::BindVS
///////////////////////////////////////////////////////////////////////////////////////////////////
VOID DxBuffer::BindVS(
    ID3D11DeviceContext* pContext,
    UINT slot)
{
    pContext->VSSetConstantBuffers(slot, 1, &m_pDxBuffer);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// DxBuffer::BindPS
///////////////////////////////////////////////////////////////////////////////////////////////////
VOID DxBuffer::BindPS(
    ID3D11DeviceContext* pContext,
    UINT slot)
{
    pContext->PSSetConstantBuffers(slot, 1, &m_pDxBuffer);
}

